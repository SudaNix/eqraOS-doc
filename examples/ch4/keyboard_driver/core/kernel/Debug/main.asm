; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Documents and Settings\SudaNix\Desktop\eqraOS\eqraOS-doc\examples\ch4\keyboard_driver\core\kernel\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG2922	DB	0aH, 'eqraOS kernel halt', 00H
$SG2991	DB	0aH, 'commands can be helpful :', 0aH, 00H
$SG2925	DB	'                                  eqraOS v0.1           '
	DB	'                        ', 00H
	ORG $+3
$SG2936	DB	0aH, 'root@eqraOS> ', 00H
	ORG $+1
$SG2978	DB	'dump', 00H
	ORG $+3
$SG2981	DB	'exit', 00H
	ORG $+3
$SG2984	DB	'reboot', 00H
	ORG $+1
$SG2987	DB	'clear', 00H
	ORG $+2
$SG2990	DB	'todo', 00H
	ORG $+3
$SG2992	DB	' - recov:   Recovery and restore deleted files.', 0aH, 00H
	ORG $+3
$SG2993	DB	' - fixbads: Detect and fix bad sectors.', 0aH, 00H
	ORG $+3
$SG2994	DB	' - fixboot: Fix MBR.', 0aH, 00H
	ORG $+2
$SG2997	DB	'eqraos', 00H
	ORG $+1
$SG2998	DB	0aH, 'eqraOS v0.1', 00H
	ORG $+3
$SG3001	DB	'help', 00H
	ORG $+3
$SG3002	DB	0aH, 'eqraOS v0.1 copyright (c) 2010 Ahmad Essam.', 00H
	ORG $+3
$SG3003	DB	0aH, 'University of Khartoum - Faculty of Mathematical Sc'
	DB	'iences', 0aH, 0aH, 00H
	ORG $+3
$SG3004	DB	'Supported commands:', 0aH, 00H
	ORG $+3
$SG3005	DB	' - dump:   Dump memory regions and memory size', 0aH, 00H
$SG3006	DB	' - clear:  Clears the display', 0aH, 00H
	ORG $+1
$SG3007	DB	' - reboot: Reboot the computer', 0aH, 00H
$SG3008	DB	' - help:   Displays this message', 0aH, 00H
	ORG $+2
$SG3009	DB	' - todo:   Todo task', 0aH, 00H
	ORG $+2
$SG3010	DB	' - exit:   Quits and halts the system', 0aH, 00H
	ORG $+1
$SG3012	DB	0aH, 'Invalid or not supported command', 00H
	ORG $+2
$SG3015	DB	'          eqraOS v0.1 copyright (c) 2010 Ahmad Essam ', 0aH
	DB	00H
	ORG $+1
$SG3016	DB	09H, 'University of Khartoum - Faculty of Mathematical Sc'
	DB	'einces ', 0aH, 0aH, 0aH, 00H
	ORG $+1
$SG3017	DB	'                ___ ___ ________ _  / __ \ / __/', 0aH, 00H
	ORG $+2
$SG3018	DB	'               / -_) _ `/ __/ _ `/ / /_/ /_\ \  ', 0aH, 00H
	ORG $+2
$SG3019	DB	'               \__/\_, /_/  \_,_/  \____//___/  ', 0aH, 00H
	ORG $+2
$SG3020	DB	'                    /_/                         ', 0aH, 00H
CONST	ENDS
PUBLIC	?eqraos_screen@@YAXXZ				; eqraos_screen
EXTRN	?kputs@@YAXPAD@Z:PROC				; kputs
EXTRN	?kset_color@@YAII@Z:PROC			; kset_color
EXTRN	?kgoto_xy@@YAXII@Z:PROC				; kgoto_xy
EXTRN	?kclear@@YAXE@Z:PROC				; kclear
; Function compile flags: /Ogtpy
; File c:\documents and settings\sudanix\desktop\eqraos\eqraos-doc\examples\ch4\keyboard_driver\core\kernel\main.cpp
_TEXT	SEGMENT
?eqraos_screen@@YAXXZ PROC				; eqraos_screen

; 64   : 
; 65   : 	kclear(GRAY_ON_BLUE);

	push	23					; 00000017H
	call	?kclear@@YAXE@Z				; kclear

; 66   : 	kgoto_xy(0,0);

	push	0
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 67   : 
; 68   : 	kset_color(WHITE_ON_CYAN);

	push	63					; 0000003fH
	call	?kset_color@@YAII@Z			; kset_color

; 69   : 	kputs("                                  eqraOS v0.1                                   ");

	push	OFFSET $SG2925
	call	?kputs@@YAXPAD@Z			; kputs

; 70   : 
; 71   : 	kgoto_xy(0,2);

	push	2
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 72   : 
; 73   : 	kset_color(GRAY_ON_BLUE);

	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color
	add	esp, 32					; 00000020H

; 74   : }

	ret	0
?eqraos_screen@@YAXXZ ENDP				; eqraos_screen
_TEXT	ENDS
PUBLIC	?prompt@@YAXXZ					; prompt
EXTRN	?kprintf@@YAHPBDZZ:PROC				; kprintf
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?prompt@@YAXXZ PROC					; prompt

; 91   : 
; 92   : 	kset_color(LIGHT_RED_ON_BLUE);

	push	28					; 0000001cH
	call	?kset_color@@YAII@Z			; kset_color

; 93   : 	kprintf("\nroot@eqraOS> ");

	push	OFFSET $SG2936
	call	?kprintf@@YAHPBDZZ			; kprintf

; 94   : 	kset_color(GRAY_ON_BLUE);

	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color
	add	esp, 12					; 0000000cH

; 95   : }

	ret	0
?prompt@@YAXXZ ENDP					; prompt
_TEXT	ENDS
PUBLIC	?getch@@YA?AW4KEY_CODE@@XZ			; getch
EXTRN	?keyboard_discard_last_key@@YAXXZ:PROC		; keyboard_discard_last_key
EXTRN	?keyboard_get_last_key@@YA?AW4KEY_CODE@@XZ:PROC	; keyboard_get_last_key
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?getch@@YA?AW4KEY_CODE@@XZ PROC				; getch

; 148  : KEY_CODE getch() {

	push	esi
$LL2@getch:

; 149  : 	KEY_CODE key = KEY_UNKNOWN;
; 150  : 	
; 151  : 	while (key == KEY_UNKNOWN)
; 152  : 		key = keyboard_get_last_key();

	call	?keyboard_get_last_key@@YA?AW4KEY_CODE@@XZ ; keyboard_get_last_key
	mov	esi, eax
	cmp	esi, 16402				; 00004012H
	je	SHORT $LL2@getch

; 153  : 		
; 154  : 	keyboard_discard_last_key();

	call	?keyboard_discard_last_key@@YAXXZ	; keyboard_discard_last_key

; 155  : 	return key;

	mov	eax, esi
	pop	esi

; 156  : }

	ret	0
?getch@@YA?AW4KEY_CODE@@XZ ENDP				; getch
_TEXT	ENDS
PUBLIC	?sleep@@YAXH@Z					; sleep
EXTRN	?get_tick_count@@YAHXZ:PROC			; get_tick_count
;	COMDAT ?ticks@?1??sleep@@YAXH@Z@4HA
_BSS	SEGMENT
?ticks@?1??sleep@@YAXH@Z@4HA DD 01H DUP (?)		; `sleep'::`2'::ticks
_BSS	ENDS
;	COMDAT ?$S1@?1??sleep@@YAXH@Z@4IA
_BSS	SEGMENT
?$S1@?1??sleep@@YAXH@Z@4IA DD 01H DUP (?)		; `sleep'::`2'::$S1
; Function compile flags: /Ogtpy
_BSS	ENDS
_TEXT	SEGMENT
_ms$ = 8						; size = 4
?sleep@@YAXH@Z PROC					; sleep

; 159  : 	static int ticks = ms + get_tick_count ();

	mov	eax, 1
	test	BYTE PTR ?$S1@?1??sleep@@YAXH@Z@4IA, al
	jne	SHORT $LL2@sleep
	or	DWORD PTR ?$S1@?1??sleep@@YAXH@Z@4IA, eax
	call	?get_tick_count@@YAHXZ			; get_tick_count
	add	eax, DWORD PTR _ms$[esp-4]
	mov	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
$LL2@sleep:

; 160  : 	while (ticks > get_tick_count ());

	call	?get_tick_count@@YAHXZ			; get_tick_count
	cmp	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	jg	SHORT $LL2@sleep

; 161  : }

	ret	0
?sleep@@YAXH@Z ENDP					; sleep
_TEXT	ENDS
PUBLIC	?exec_cmd@@YA_NPAD@Z				; exec_cmd
EXTRN	?keyboard_reset_system@@YAXXZ:PROC		; keyboard_reset_system
EXTRN	?mem_info_dump_region@@YAXXZ:PROC		; mem_info_dump_region
EXTRN	?mem_info_dump_size@@YAXXZ:PROC			; mem_info_dump_size
EXTRN	?strcmp@@YAHPBD0@Z:PROC				; strcmp
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?exec_cmd@@YA_NPAD@Z PROC				; exec_cmd

; 164  : bool exec_cmd(char* cmd) {

	push	esi

; 165  : 	if (strcmp (cmd, "dump") == 0) {

	mov	esi, DWORD PTR _cmd$[esp]
	push	OFFSET $SG2978
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@exec_cmd

; 166  : 		mem_info_dump_size();

	call	?mem_info_dump_size@@YAXXZ		; mem_info_dump_size

; 167  : 		mem_info_dump_region();

	call	?mem_info_dump_region@@YAXXZ		; mem_info_dump_region

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN14@exec_cmd:

; 168  : 	}
; 169  : 
; 170  : 	else if (strcmp (cmd, "exit") == 0) {

	push	OFFSET $SG2981
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@exec_cmd

; 171  : 		return true;

	mov	al, 1
	pop	esi

; 216  : }

	ret	0
$LN12@exec_cmd:

; 172  : 	}
; 173  : 
; 174  : 	else if (strcmp (cmd, "reboot") == 0) 

	push	OFFSET $SG2984
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@exec_cmd

; 175  : 		keyboard_reset_system();

	call	?keyboard_reset_system@@YAXXZ		; keyboard_reset_system

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN10@exec_cmd:

; 176  : 
; 177  : 
; 178  : 	else if (strcmp (cmd, "clear") == 0) {

	push	OFFSET $SG2987
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@exec_cmd

; 179  : 		eqraos_screen();

	call	?eqraos_screen@@YAXXZ			; eqraos_screen

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN8@exec_cmd:

; 180  : 	}
; 181  : 
; 182  : 	else if (strcmp (cmd, "todo") == 0) {

	push	OFFSET $SG2990
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@exec_cmd

; 183  : 		kputs("\ncommands can be helpful :\n");

	push	OFFSET $SG2991
	call	?kputs@@YAXPAD@Z			; kputs

; 184  : 		kputs(" - recov:   Recovery and restore deleted files.\n");

	push	OFFSET $SG2992
	call	?kputs@@YAXPAD@Z			; kputs

; 185  : 		kputs(" - fixbads: Detect and fix bad sectors.\n");

	push	OFFSET $SG2993
	call	?kputs@@YAXPAD@Z			; kputs

; 186  : 		kputs(" - fixboot: Fix MBR.\n");

	push	OFFSET $SG2994
	call	?kputs@@YAXPAD@Z			; kputs
	add	esp, 16					; 00000010H

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN6@exec_cmd:

; 187  : 	}
; 188  : 
; 189  : 	else if (strcmp (cmd, "eqraos") == 0) {

	push	OFFSET $SG2997
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@exec_cmd

; 190  : 		kset_color(WHITE_ON_BLUE);

	push	31					; 0000001fH
	call	?kset_color@@YAII@Z			; kset_color

; 191  : 		kputs("\neqraOS v0.1");

	push	OFFSET $SG2998
	call	?kputs@@YAXPAD@Z			; kputs

; 192  : 		kset_color(GRAY_ON_BLUE);

	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color
	add	esp, 12					; 0000000cH

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN4@exec_cmd:

; 193  : 	}
; 194  : 
; 195  : 	else if (strcmp (cmd, "help") == 0) {

	push	OFFSET $SG3001
	push	esi
	call	?strcmp@@YAHPBD0@Z			; strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@exec_cmd

; 196  : 		kset_color(WHITE_ON_BLUE);

	push	31					; 0000001fH
	call	?kset_color@@YAII@Z			; kset_color

; 197  : 		kputs("\neqraOS v0.1 copyright (c) 2010 Ahmad Essam.");

	push	OFFSET $SG3002
	call	?kputs@@YAXPAD@Z			; kputs

; 198  : 		kset_color(GRAY_ON_BLUE);

	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color

; 199  : 
; 200  : 		kputs("\nUniversity of Khartoum - Faculty of Mathematical Sciences\n\n");

	push	OFFSET $SG3003
	call	?kputs@@YAXPAD@Z			; kputs

; 201  : 		kputs("Supported commands:\n");

	push	OFFSET $SG3004
	call	?kputs@@YAXPAD@Z			; kputs

; 202  : 		kputs(" - dump:   Dump memory regions and memory size\n");

	push	OFFSET $SG3005
	call	?kputs@@YAXPAD@Z			; kputs

; 203  : 		kputs(" - clear:  Clears the display\n");

	push	OFFSET $SG3006
	call	?kputs@@YAXPAD@Z			; kputs

; 204  : 		kputs(" - reboot: Reboot the computer\n");

	push	OFFSET $SG3007
	call	?kputs@@YAXPAD@Z			; kputs

; 205  : 		kputs(" - help:   Displays this message\n");

	push	OFFSET $SG3008
	call	?kputs@@YAXPAD@Z			; kputs

; 206  : 		kputs(" - todo:   Todo task\n");

	push	OFFSET $SG3009
	call	?kputs@@YAXPAD@Z			; kputs

; 207  : 		kputs(" - exit:   Quits and halts the system\n");

	push	OFFSET $SG3010
	call	?kputs@@YAXPAD@Z			; kputs
	add	esp, 44					; 0000002cH

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
$LN2@exec_cmd:

; 208  : 	}
; 209  : 
; 210  : 	// invalid command
; 211  : 	else {
; 212  : 		kputs("\nInvalid or not supported command");

	push	OFFSET $SG3012
	call	?kputs@@YAXPAD@Z			; kputs
	add	esp, 4

; 213  : 	}
; 214  : 
; 215  : 	return false;

	xor	al, al
	pop	esi

; 216  : }

	ret	0
?exec_cmd@@YA_NPAD@Z ENDP				; exec_cmd
_TEXT	ENDS
PUBLIC	?eqraos_splash@@YAXXZ				; eqraos_splash
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?eqraos_splash@@YAXXZ PROC				; eqraos_splash

; 219  : 	kgoto_xy(0,0);

	push	0
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 220  : 	kclear(WHITE_ON_BLUE);

	push	31					; 0000001fH
	call	?kclear@@YAXE@Z				; kclear

; 221  : 	kset_color(WHITE_ON_BLUE);

	push	31					; 0000001fH
	call	?kset_color@@YAII@Z			; kset_color

; 222  : 	kgoto_xy(0,4);

	push	4
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 223  : 
; 224  : 	kputs("          eqraOS v0.1 copyright (c) 2010 Ahmad Essam \n");

	push	OFFSET $SG3015
	call	?kputs@@YAXPAD@Z			; kputs

; 225  : 	kputs("	University of Khartoum - Faculty of Mathematical Sceinces \n\n\n");

	push	OFFSET $SG3016
	call	?kputs@@YAXPAD@Z			; kputs

; 226  : 	kprintf("                ___ ___ ________ _  / __ \\ / __/\n");

	push	OFFSET $SG3017
	call	?kprintf@@YAHPBDZZ			; kprintf

; 227  : 	kprintf("               / -_) _ `/ __/ _ `/ / /_/ /_\\ \\  \n");

	push	OFFSET $SG3018
	call	?kprintf@@YAHPBDZZ			; kprintf

; 228  : 	kprintf("               \\__/\\_, /_/  \\_,_/  \\____//___/  \n");

	push	OFFSET $SG3019
	call	?kprintf@@YAHPBDZZ			; kprintf

; 229  : 	kprintf("                    /_/                         \n");

	push	OFFSET $SG3020
	call	?kprintf@@YAHPBDZZ			; kprintf

; 230  : 
; 231  : 	sleep(1000);

	mov	eax, 1
	add	esp, 48					; 00000030H
	test	BYTE PTR ?$S1@?1??sleep@@YAXH@Z@4IA, al
	jne	SHORT $LL4@eqraos_spl
	or	DWORD PTR ?$S1@?1??sleep@@YAXH@Z@4IA, eax
	call	?get_tick_count@@YAHXZ			; get_tick_count
	add	eax, 1000				; 000003e8H
	mov	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
$LL4@eqraos_spl:
	call	?get_tick_count@@YAHXZ			; get_tick_count
	cmp	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	jg	SHORT $LL4@eqraos_spl

; 232  : }

	ret	0
?eqraos_splash@@YAXXZ ENDP				; eqraos_splash
_TEXT	ENDS
PUBLIC	?read_cmd@@YAXPADH@Z				; read_cmd
EXTRN	?keyboard_key_to_ascii@@YADW4KEY_CODE@@@Z:PROC	; keyboard_key_to_ascii
EXTRN	?kputc@@YAXE@Z:PROC				; kputc
EXTRN	?kget_horz@@YAHXZ:PROC				; kget_horz
EXTRN	?kget_xy@@YAXPAI0@Z:PROC			; kget_xy
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_x$2950 = -8						; size = 4
_c$2955 = -4						; size = 1
_y$2951 = 8						; size = 4
_cmd$ = 8						; size = 4
_n$ = 12						; size = 4
?read_cmd@@YAXPADH@Z PROC				; read_cmd

; 97   : void read_cmd(char* cmd,int n) {

	sub	esp, 8
	push	edi

; 98   : 	prompt();

	push	28					; 0000001cH
	call	?kset_color@@YAII@Z			; kset_color
	push	OFFSET $SG2936
	call	?kprintf@@YAHPBDZZ			; kprintf
	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color

; 99   : 	
; 100  : 	KEY_CODE key = KEY_UNKNOWN ;
; 101  : 	bool buffer_char ;
; 102  : 	
; 103  : 	int i=0;

	xor	edi, edi
	add	esp, 12					; 0000000cH

; 104  : 	while (i<n) {

	cmp	DWORD PTR _n$[esp+8], edi
	jle	$LN33@read_cmd
	push	ebp
	mov	ebp, DWORD PTR _cmd$[esp+12]
	push	ebx
	push	esi

; 105  : 		buffer_char = true;
; 106  : 		key = getch();

$LL15@read_cmd:
	call	?keyboard_get_last_key@@YA?AW4KEY_CODE@@XZ ; keyboard_get_last_key
	mov	esi, eax
	cmp	esi, 16402				; 00004012H
	je	SHORT $LL15@read_cmd
	call	?keyboard_discard_last_key@@YAXXZ	; keyboard_discard_last_key

; 107  : 		
; 108  : 		if (key == KEY_RETURN)

	cmp	esi, 13					; 0000000dH
	je	$LN32@read_cmd

; 109  : 			break;
; 110  : 		
; 111  : 		if (key == KEY_BACKSPACE) {

	cmp	esi, 8
	jne	SHORT $LN28@read_cmd

; 112  : 			buffer_char = false;
; 113  : 			
; 114  : 			if (i>0) {

	test	edi, edi
	jle	$LN35@read_cmd

; 115  : 				uint32_t x,y;
; 116  : 				kget_xy(&x,&y);

	lea	eax, DWORD PTR _y$2951[esp+20]
	push	eax
	lea	ecx, DWORD PTR _x$2950[esp+28]
	push	ecx
	call	?kget_xy@@YAXPAI0@Z			; kget_xy

; 117  : 				
; 118  : 				if (x>0)

	mov	eax, DWORD PTR _x$2950[esp+32]
	add	esp, 8
	test	eax, eax
	jbe	SHORT $LN4@read_cmd

; 119  : 					kgoto_xy(--x,y);

	mov	edx, DWORD PTR _y$2951[esp+20]
	sub	eax, 1
	push	edx
	push	eax
	mov	DWORD PTR _x$2950[esp+32], eax
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy
	add	esp, 8

; 120  : 				else {

	jmp	SHORT $LN3@read_cmd
$LN4@read_cmd:

; 121  : 					--y;

	sub	DWORD PTR _y$2951[esp+20], 1

; 122  : 					x = kget_horz();

	call	?kget_horz@@YAHXZ			; kget_horz
	mov	DWORD PTR _x$2950[esp+24], eax
$LN3@read_cmd:

; 123  : 				}
; 124  : 				
; 125  : 				// erase the character from display
; 126  : 				kputc(' ');

	push	32					; 00000020H
	call	?kputc@@YAXE@Z				; kputc

; 127  : 				kgoto_xy(x,y);

	mov	eax, DWORD PTR _y$2951[esp+24]
	mov	ecx, DWORD PTR _x$2950[esp+28]
	push	eax
	push	ecx
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy
	add	esp, 12					; 0000000cH

; 128  : 				--i;

	sub	edi, 1

; 129  : 			}
; 130  : 		}
; 131  : 		
; 132  : 		
; 133  : 		if (buffer_char) {

	jmp	SHORT $LN35@read_cmd
$LN28@read_cmd:

; 134  : 			char c = keyboard_key_to_ascii (key);

	push	esi
	call	?keyboard_key_to_ascii@@YADW4KEY_CODE@@@Z ; keyboard_key_to_ascii
	mov	bl, al
	add	esp, 4

; 135  : 			if (c) {

	test	bl, bl
	mov	BYTE PTR _c$2955[esp+24], bl
	je	SHORT $LN35@read_cmd

; 136  : 				kputc(c);

	mov	edx, DWORD PTR _c$2955[esp+24]
	push	edx
	call	?kputc@@YAXE@Z				; kputc
	add	esp, 4

; 137  : 				cmd[i] = c;

	mov	BYTE PTR [edi+ebp], bl

; 138  : 				++i;

	add	edi, 1
$LN35@read_cmd:

; 139  : 			}
; 140  : 		}
; 141  : 		
; 142  : 		sleep(10);

	test	BYTE PTR ?$S1@?1??sleep@@YAXH@Z@4IA, 1
	jne	SHORT $LL19@read_cmd
	or	DWORD PTR ?$S1@?1??sleep@@YAXH@Z@4IA, 1
	call	?get_tick_count@@YAHXZ			; get_tick_count
	add	eax, 10					; 0000000aH
	mov	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	npad	4
$LL19@read_cmd:
	call	?get_tick_count@@YAHXZ			; get_tick_count
	cmp	DWORD PTR ?ticks@?1??sleep@@YAXH@Z@4HA, eax
	jg	SHORT $LL19@read_cmd

; 104  : 	while (i<n) {

	cmp	edi, DWORD PTR _n$[esp+20]
	jl	$LL15@read_cmd
$LN32@read_cmd:
	pop	esi
	pop	ebx

; 143  : 	}
; 144  : 	
; 145  : 	cmd[i] = '\0';

	mov	BYTE PTR [edi+ebp], 0
	pop	ebp
	pop	edi

; 146  : }

	add	esp, 8
	ret	0
$LN33@read_cmd:

; 143  : 	}
; 144  : 	
; 145  : 	cmd[i] = '\0';

	mov	eax, DWORD PTR _cmd$[esp+8]
	mov	BYTE PTR [edi+eax], 0
	pop	edi

; 146  : }

	add	esp, 8
	ret	0
?read_cmd@@YAXPADH@Z ENDP				; read_cmd
_TEXT	ENDS
PUBLIC	?exec@@YAXXZ					; exec
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cmd$ = -100						; size = 100
?exec@@YAXXZ PROC					; exec

; 77   : void exec() {

	sub	esp, 100				; 00000064H
$LL3@exec:

; 78   : 	char cmd[100] ;
; 79   : 	
; 80   : 	while(1) {
; 81   : 		read_cmd(cmd,98);

	lea	eax, DWORD PTR _cmd$[esp+100]
	push	98					; 00000062H
	push	eax
	call	?read_cmd@@YAXPADH@Z			; read_cmd

; 82   : 		
; 83   : 		bool ret = exec_cmd(cmd);

	lea	ecx, DWORD PTR _cmd$[esp+108]
	push	ecx
	call	?exec_cmd@@YA_NPAD@Z			; exec_cmd
	add	esp, 12					; 0000000cH

; 84   : 		
; 85   : 		if (ret)

	test	al, al
	je	SHORT $LL3@exec

; 86   : 			break;
; 87   : 	}
; 88   : }

	add	esp, 100				; 00000064H
	ret	0
?exec@@YAXXZ ENDP					; exec
_TEXT	ENDS
PUBLIC	_main
EXTRN	?keyboard_install@@YAXH@Z:PROC			; keyboard_install
EXTRN	?execption_init@@YAXXZ:PROC			; execption_init
EXTRN	?enable_irq@@YAXXZ:PROC				; enable_irq
EXTRN	?hal_init@@YAHXZ:PROC				; hal_init
EXTRN	?mem_info_init@@YAXPAUmultiboot_info@@@Z:PROC	; mem_info_init
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cmd$3093 = -100					; size = 100
_boot_info$ = 8						; size = 4
_main	PROC

; 46   : 	mem_info_init(boot_info);

	mov	eax, DWORD PTR _boot_info$[esp-4]
	sub	esp, 100				; 00000064H
	push	eax
	call	?mem_info_init@@YAXPAUmultiboot_info@@@Z ; mem_info_init

; 47   : 
; 48   : 	hal_init();

	call	?hal_init@@YAHXZ			; hal_init

; 49   : 	enable_irq();

	call	?enable_irq@@YAXXZ			; enable_irq

; 50   : 	execption_init();

	call	?execption_init@@YAXXZ			; execption_init

; 51   : 
; 52   : 	eqraos_splash();

	call	?eqraos_splash@@YAXXZ			; eqraos_splash

; 53   : 	eqraos_screen();

	push	23					; 00000017H
	call	?kclear@@YAXE@Z				; kclear
	push	0
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy
	push	63					; 0000003fH
	call	?kset_color@@YAII@Z			; kset_color
	push	OFFSET $SG2925
	call	?kputs@@YAXPAD@Z			; kputs
	push	2
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy
	push	23					; 00000017H
	call	?kset_color@@YAII@Z			; kset_color

; 54   : 
; 55   : 	keyboard_install(33);

	push	33					; 00000021H
	call	?keyboard_install@@YAXH@Z		; keyboard_install
	add	esp, 40					; 00000028H
	npad	4

; 56   : 
; 57   : 	exec();

$LL7@main:
	lea	ecx, DWORD PTR _cmd$3093[esp+100]
	push	98					; 00000062H
	push	ecx
	call	?read_cmd@@YAXPADH@Z			; read_cmd
	lea	edx, DWORD PTR _cmd$3093[esp+108]
	push	edx
	call	?exec_cmd@@YA_NPAD@Z			; exec_cmd
	add	esp, 12					; 0000000cH
	test	al, al
	je	SHORT $LL7@main

; 58   : 
; 59   : 	kputs("\neqraOS kernel halt");

	push	OFFSET $SG2922
	call	?kputs@@YAXPAD@Z			; kputs

; 60   : 	return 0;

	xor	eax, eax

; 61   : }

	add	esp, 104				; 00000068H
	ret	0
_main	ENDP
_TEXT	ENDS
END
