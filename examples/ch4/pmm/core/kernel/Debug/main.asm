; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Documents and Settings\SudaNix\Desktop\docs\research\examples\ch4\irq\core\kernel\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG2690	DB	'    eqraOS Kernel executed.', 0aH, 0aH, 00H
	ORG $+2
$SG2691	DB	'                ___ ___ ________ _  / __ \ / __/', 0aH, 00H
	ORG $+2
$SG2692	DB	'               / -_) _ `/ __/ _ `/ / /_/ /_\ \  ', 0aH, 00H
	ORG $+2
$SG2693	DB	'               \__/\_, /_/  \_,_/  \____//___/  ', 0aH, 00H
	ORG $+2
$SG2694	DB	'                    /_/                         ', 0aH, 00H
	ORG $+2
$SG2695	DB	'Entering PMode ....................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2696	DB	'Initializing CRT ..................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2697	DB	'Initializing GDT ..................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2698	DB	'Initializing IDT ..................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2699	DB	'Initializing PIC ..................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2700	DB	'Initializing PIT ..................................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2701	DB	'Setup Error/Exception Handler .....................[ok]', 0aH
	DB	00H
	ORG $+3
$SG2705	DB	'Current tick count: %d', 0aH, 00H
CONST	ENDS
PUBLIC	_main
EXTRN	?get_tick_count@@YAHXZ:PROC			; get_tick_count
EXTRN	?kprintf@@YAHPBDZZ:PROC				; kprintf
EXTRN	?kset_color@@YAII@Z:PROC			; kset_color
EXTRN	?kgoto_xy@@YAXII@Z:PROC				; kgoto_xy
EXTRN	?kclear@@YAXG@Z:PROC				; kclear
EXTRN	?simd_fpu_fault@@YAXIII@Z:PROC			; simd_fpu_fault
EXTRN	?machine_check_abort@@YAXIII@Z:PROC		; machine_check_abort
EXTRN	?alignment_check_fault@@YAXIIII@Z:PROC		; alignment_check_fault
EXTRN	?fpu_fault@@YAXIII@Z:PROC			; fpu_fault
EXTRN	?page_fault@@YAXIIII@Z:PROC			; page_fault
EXTRN	?general_protection_fault@@YAXIIII@Z:PROC	; general_protection_fault
EXTRN	?stack_fault@@YAXIIII@Z:PROC			; stack_fault
EXTRN	?no_segment_fault@@YAXIIII@Z:PROC		; no_segment_fault
EXTRN	?invalid_tss_fault@@YAXIIII@Z:PROC		; invalid_tss_fault
EXTRN	?double_fault_abort@@YAXIIII@Z:PROC		; double_fault_abort
EXTRN	?no_device_fault@@YAXIII@Z:PROC			; no_device_fault
EXTRN	?invalid_opcode_fault@@YAXIII@Z:PROC		; invalid_opcode_fault
EXTRN	?bounds_check_fault@@YAXIII@Z:PROC		; bounds_check_fault
EXTRN	?overflow_trap@@YAXIII@Z:PROC			; overflow_trap
EXTRN	?breakpoint_trap@@YAXIII@Z:PROC			; breakpoint_trap
EXTRN	?nmi_trap@@YAXIII@Z:PROC			; nmi_trap
EXTRN	?single_step_trap@@YAXIII@Z:PROC		; single_step_trap
EXTRN	?set_vector@@YAXIA6AXXZ@Z:PROC			; set_vector
EXTRN	?divide_by_zero_fault@@YAXIII@Z:PROC		; divide_by_zero_fault
EXTRN	?enable_irq@@YAXXZ:PROC				; enable_irq
EXTRN	?hal_init@@YAHXZ:PROC				; hal_init
; Function compile flags: /Ogtpy
; File c:\documents and settings\sudanix\desktop\docs\research\examples\ch4\irq\core\kernel\main.cpp
_TEXT	SEGMENT
_main	PROC

; 47   : 	/*kclear(0x18);		//blue
; 48   : 	kgoto_xy(0,0);
; 49   : 
; 50   : 	kset_color(0x70);  //black on gray
; 51   : 	kputs("eqra Operating System (eqraOS) Preparing to load...");
; 52   : 
; 53   : 	kgoto_xy(0,1);
; 54   : 	kset_color(0x19);
; 55   : 	kputs("eqraOS Starting Up...");
; 56   : 
; 57   : 	kset_color(0x70);
; 58   : 	kgoto_xy(0,24);
; 59   : 	kputs(" Initializing Hardware Abstraction Layer (HAL.lib)... "); 
; 60   : 
; 61   : 	kset_color(0x19);
; 62   : 	kgoto_xy(0,2);
; 63   : 	*/
; 64   : 	
; 65   : 	hal_init();

	call	?hal_init@@YAHXZ			; hal_init

; 66   : 	enable_irq();

	call	?enable_irq@@YAXXZ			; enable_irq

; 67   : 	
; 68   : 	set_vector(0,(void (_cdecl &)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIII@Z	; divide_by_zero_fault
	push	0
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 69   : 	set_vector(1,(void (_cdecl &)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 70   : 	set_vector(2,(void (_cdecl &)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 71   : 	set_vector(3,(void (_cdecl &)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 72   : 	set_vector(4,(void (_cdecl &)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 73   : 	set_vector(5,(void (_cdecl &)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 74   : 	set_vector(6,(void (_cdecl &)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 75   : 	set_vector(7,(void (_cdecl &)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector
	add	esp, 64					; 00000040H

; 76   : 	set_vector(8,(void (_cdecl &)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 77   : 	set_vector(10,(void (_cdecl &)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 78   : 	set_vector(11,(void (_cdecl &)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 79   : 	set_vector(12,(void (_cdecl &)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 80   : 	set_vector(13,(void (_cdecl &)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 81   : 	set_vector(14,(void (_cdecl &)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 82   : 	set_vector(16,(void (_cdecl &)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 83   : 	set_vector(17,(void (_cdecl &)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector
	add	esp, 64					; 00000040H

; 84   : 	set_vector(18,(void (_cdecl &)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 85   : 	set_vector(19,(void (_cdecl &)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 86   : 	
; 87   : 	kclear(WHITE_ON_RED);

	push	79					; 0000004fH
	call	?kclear@@YAXG@Z				; kclear

; 88   : 	kgoto_xy(0,0);

	push	0
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 89   : 	
; 90   : 	kset_color(BLACK_ON_RED);

	push	64					; 00000040H
	call	?kset_color@@YAII@Z			; kset_color

; 91   : 	kprintf("    eqraOS Kernel executed.\n\n");

	push	OFFSET $SG2690
	call	?kprintf@@YAHPBDZZ			; kprintf

; 92   : 
; 93   : 	kset_color(GRAY_ON_RED);

	push	71					; 00000047H
	call	?kset_color@@YAII@Z			; kset_color

; 94   : 
; 95   : 	kprintf("                ___ ___ ________ _  / __ \\ / __/\n");

	push	OFFSET $SG2691
	call	?kprintf@@YAHPBDZZ			; kprintf

; 96   : 	kprintf("               / -_) _ `/ __/ _ `/ / /_/ /_\\ \\  \n");

	push	OFFSET $SG2692
	call	?kprintf@@YAHPBDZZ			; kprintf

; 97   : 	kprintf("               \\__/\\_, /_/  \\_,_/  \\____//___/  \n");

	push	OFFSET $SG2693
	call	?kprintf@@YAHPBDZZ			; kprintf

; 98   : 	kprintf("                    /_/                         \n");

	push	OFFSET $SG2694
	call	?kprintf@@YAHPBDZZ			; kprintf

; 99   : 	
; 100  : 	kset_color(WHITE_ON_RED);

	push	79					; 0000004fH
	call	?kset_color@@YAII@Z			; kset_color

; 101  : 
; 102  : 	kprintf("Entering PMode ....................................[ok]\n");

	push	OFFSET $SG2695
	call	?kprintf@@YAHPBDZZ			; kprintf
	add	esp, 64					; 00000040H

; 103  : 	kprintf("Initializing CRT ..................................[ok]\n");

	push	OFFSET $SG2696
	call	?kprintf@@YAHPBDZZ			; kprintf

; 104  : 	kprintf("Initializing GDT ..................................[ok]\n");

	push	OFFSET $SG2697
	call	?kprintf@@YAHPBDZZ			; kprintf

; 105  : 	kprintf("Initializing IDT ..................................[ok]\n");

	push	OFFSET $SG2698
	call	?kprintf@@YAHPBDZZ			; kprintf

; 106  : 	kprintf("Initializing PIC ..................................[ok]\n");

	push	OFFSET $SG2699
	call	?kprintf@@YAHPBDZZ			; kprintf

; 107  : 	kprintf("Initializing PIT ..................................[ok]\n");

	push	OFFSET $SG2700
	call	?kprintf@@YAHPBDZZ			; kprintf

; 108  : 	kprintf("Setup Error/Exception Handler .....................[ok]\n");

	push	OFFSET $SG2701
	call	?kprintf@@YAHPBDZZ			; kprintf

; 109  : 	
; 110  : 	//kprintf("CPU vendor is: %s\n",get_cpu_vendor());
; 111  : 	
; 112  : 	kset_color(BLACK_ON_GRAY);

	push	112					; 00000070H
	call	?kset_color@@YAII@Z			; kset_color
	add	esp, 28					; 0000001cH
$LL2@main:

; 113  : 
; 114  : 
; 115  : 	for (;;) {
; 116  : 		kgoto_xy(0,24);

	push	24					; 00000018H
	push	0
	call	?kgoto_xy@@YAXII@Z			; kgoto_xy

; 117  : 		kprintf("Current tick count: %d\n",get_tick_count());

	call	?get_tick_count@@YAHXZ			; get_tick_count
	push	eax
	push	OFFSET $SG2705
	call	?kprintf@@YAHPBDZZ			; kprintf
	add	esp, 16					; 00000010H

; 118  : 	}

	jmp	SHORT $LL2@main
_main	ENDP
_TEXT	ENDS
END
