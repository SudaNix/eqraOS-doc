; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Documents and Settings\SudaNix\Desktop\docs\research\examples\ch4\irq\core\kernel\exception.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG2647	DB	'Divide by 0', 00H
$SG2656	DB	'Single step', 00H
$SG2665	DB	'NMI trap', 00H
	ORG $+3
$SG2674	DB	'Breakpoint trap', 00H
$SG2683	DB	'Overflow trap', 00H
	ORG $+2
$SG2692	DB	'Bounds check fault', 00H
	ORG $+1
$SG2701	DB	'Invalid opcode', 00H
	ORG $+1
$SG2710	DB	'Device not found', 00H
	ORG $+3
$SG2720	DB	'Double fault', 00H
	ORG $+3
$SG2730	DB	'Invalid TSS', 00H
$SG2740	DB	'Invalid segment', 00H
$SG2750	DB	'Stack fault', 00H
$SG2760	DB	'General Protection Fault', 00H
	ORG $+3
$SG2770	DB	'Page Fault', 00H
	ORG $+1
$SG2779	DB	'FPU Fault', 00H
	ORG $+2
$SG2789	DB	'Alignment Check', 00H
$SG2798	DB	'Machine Check', 00H
	ORG $+2
$SG2807	DB	'FPU SIMD fault', 00H
CONST	ENDS
PUBLIC	?divide_by_zero_fault@@YAXIII@Z			; divide_by_zero_fault
EXTRN	?kernel_panic@@YAXPBDZZ:PROC			; kernel_panic
; Function compile flags: /Ogtpy
; File c:\documents and settings\sudanix\desktop\docs\research\examples\ch4\irq\core\kernel\exception.cpp
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?divide_by_zero_fault@@YAXIII@Z PROC			; divide_by_zero_fault

; 13   : 	kernel_panic("Divide by 0");

	push	OFFSET $SG2647
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@divide_by_:

; 14   : 	for (;;);

	jmp	SHORT $LL2@divide_by_
?divide_by_zero_fault@@YAXIII@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
PUBLIC	?single_step_trap@@YAXIII@Z			; single_step_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?single_step_trap@@YAXIII@Z PROC			; single_step_trap

; 19   : 	kernel_panic("Single step");

	push	OFFSET $SG2656
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@single_ste:

; 20   : 	for (;;);

	jmp	SHORT $LL2@single_ste
?single_step_trap@@YAXIII@Z ENDP			; single_step_trap
_TEXT	ENDS
PUBLIC	?nmi_trap@@YAXIII@Z				; nmi_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?nmi_trap@@YAXIII@Z PROC				; nmi_trap

; 25   : 	kernel_panic("NMI trap");

	push	OFFSET $SG2665
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@nmi_trap:

; 26   : 	for (;;);

	jmp	SHORT $LL2@nmi_trap
?nmi_trap@@YAXIII@Z ENDP				; nmi_trap
_TEXT	ENDS
PUBLIC	?breakpoint_trap@@YAXIII@Z			; breakpoint_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?breakpoint_trap@@YAXIII@Z PROC				; breakpoint_trap

; 31   : 	kernel_panic("Breakpoint trap");

	push	OFFSET $SG2674
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@breakpoint:

; 32   : 	for (;;);

	jmp	SHORT $LL2@breakpoint
?breakpoint_trap@@YAXIII@Z ENDP				; breakpoint_trap
_TEXT	ENDS
PUBLIC	?overflow_trap@@YAXIII@Z			; overflow_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?overflow_trap@@YAXIII@Z PROC				; overflow_trap

; 37   : 	kernel_panic("Overflow trap");

	push	OFFSET $SG2683
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@overflow_t:

; 38   : 	for (;;);

	jmp	SHORT $LL2@overflow_t
?overflow_trap@@YAXIII@Z ENDP				; overflow_trap
_TEXT	ENDS
PUBLIC	?bounds_check_fault@@YAXIII@Z			; bounds_check_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?bounds_check_fault@@YAXIII@Z PROC			; bounds_check_fault

; 43   : 	kernel_panic("Bounds check fault");

	push	OFFSET $SG2692
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@bounds_che:

; 44   : 	for (;;);

	jmp	SHORT $LL2@bounds_che
?bounds_check_fault@@YAXIII@Z ENDP			; bounds_check_fault
_TEXT	ENDS
PUBLIC	?invalid_opcode_fault@@YAXIII@Z			; invalid_opcode_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?invalid_opcode_fault@@YAXIII@Z PROC			; invalid_opcode_fault

; 49   : 	kernel_panic("Invalid opcode");

	push	OFFSET $SG2701
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@invalid_op:

; 50   : 	for (;;);

	jmp	SHORT $LL2@invalid_op
?invalid_opcode_fault@@YAXIII@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
PUBLIC	?no_device_fault@@YAXIII@Z			; no_device_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?no_device_fault@@YAXIII@Z PROC				; no_device_fault

; 55   : 	kernel_panic("Device not found");

	push	OFFSET $SG2710
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@no_device_:

; 56   : 	for (;;);

	jmp	SHORT $LL2@no_device_
?no_device_fault@@YAXIII@Z ENDP				; no_device_fault
_TEXT	ENDS
PUBLIC	?double_fault_abort@@YAXIIII@Z			; double_fault_abort
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?double_fault_abort@@YAXIIII@Z PROC			; double_fault_abort

; 61   : 	kernel_panic("Double fault");

	push	OFFSET $SG2720
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@double_fau:

; 62   : 	for (;;);

	jmp	SHORT $LL2@double_fau
?double_fault_abort@@YAXIIII@Z ENDP			; double_fault_abort
_TEXT	ENDS
PUBLIC	?invalid_tss_fault@@YAXIIII@Z			; invalid_tss_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?invalid_tss_fault@@YAXIIII@Z PROC			; invalid_tss_fault

; 67   : 	kernel_panic("Invalid TSS");

	push	OFFSET $SG2730
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@invalid_ts:

; 68   : 	for (;;);

	jmp	SHORT $LL2@invalid_ts
?invalid_tss_fault@@YAXIIII@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
PUBLIC	?no_segment_fault@@YAXIIII@Z			; no_segment_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?no_segment_fault@@YAXIIII@Z PROC			; no_segment_fault

; 73   : 	kernel_panic("Invalid segment");

	push	OFFSET $SG2740
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@no_segment:

; 74   : 	for (;;);

	jmp	SHORT $LL2@no_segment
?no_segment_fault@@YAXIIII@Z ENDP			; no_segment_fault
_TEXT	ENDS
PUBLIC	?stack_fault@@YAXIIII@Z				; stack_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?stack_fault@@YAXIIII@Z PROC				; stack_fault

; 79   : 	kernel_panic("Stack fault");

	push	OFFSET $SG2750
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@stack_faul:

; 80   : 	for (;;);

	jmp	SHORT $LL2@stack_faul
?stack_fault@@YAXIIII@Z ENDP				; stack_fault
_TEXT	ENDS
PUBLIC	?general_protection_fault@@YAXIIII@Z		; general_protection_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?general_protection_fault@@YAXIIII@Z PROC		; general_protection_fault

; 85   : 	kernel_panic("General Protection Fault");

	push	OFFSET $SG2760
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@general_pr:

; 86   : 	for (;;);

	jmp	SHORT $LL2@general_pr
?general_protection_fault@@YAXIIII@Z ENDP		; general_protection_fault
_TEXT	ENDS
PUBLIC	?page_fault@@YAXIIII@Z				; page_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?page_fault@@YAXIIII@Z PROC				; page_fault

; 92   : 	kernel_panic("Page Fault");

	push	OFFSET $SG2770
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@page_fault:

; 93   : 	for (;;);

	jmp	SHORT $LL2@page_fault
?page_fault@@YAXIIII@Z ENDP				; page_fault
_TEXT	ENDS
PUBLIC	?fpu_fault@@YAXIII@Z				; fpu_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?fpu_fault@@YAXIII@Z PROC				; fpu_fault

; 98   : 	kernel_panic("FPU Fault");

	push	OFFSET $SG2779
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@fpu_fault:

; 99   : 	for (;;);

	jmp	SHORT $LL2@fpu_fault
?fpu_fault@@YAXIII@Z ENDP				; fpu_fault
_TEXT	ENDS
PUBLIC	?alignment_check_fault@@YAXIIII@Z		; alignment_check_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?alignment_check_fault@@YAXIIII@Z PROC			; alignment_check_fault

; 104  : 	kernel_panic("Alignment Check");

	push	OFFSET $SG2789
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@alignment_:

; 105  : 	for (;;);

	jmp	SHORT $LL2@alignment_
?alignment_check_fault@@YAXIIII@Z ENDP			; alignment_check_fault
_TEXT	ENDS
PUBLIC	?machine_check_abort@@YAXIII@Z			; machine_check_abort
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?machine_check_abort@@YAXIII@Z PROC			; machine_check_abort

; 110  : 	kernel_panic("Machine Check");

	push	OFFSET $SG2798
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@machine_ch:

; 111  : 	for (;;);

	jmp	SHORT $LL2@machine_ch
?machine_check_abort@@YAXIII@Z ENDP			; machine_check_abort
_TEXT	ENDS
PUBLIC	?simd_fpu_fault@@YAXIII@Z			; simd_fpu_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?simd_fpu_fault@@YAXIII@Z PROC				; simd_fpu_fault

; 116  : 	kernel_panic("FPU SIMD fault");

	push	OFFSET $SG2807
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@simd_fpu_f:

; 117  : 	for (;;);

	jmp	SHORT $LL2@simd_fpu_f
?simd_fpu_fault@@YAXIII@Z ENDP				; simd_fpu_fault
_TEXT	ENDS
END
