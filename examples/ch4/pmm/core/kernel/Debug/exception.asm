; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

	TITLE	c:\Documents and Settings\SudaNix\Desktop\eqraOS\eqraOS-doc\examples\ch4\pmm\core\kernel\exception.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG2686	DB	'Divide by 0', 00H
$SG2695	DB	'Single step', 00H
$SG2704	DB	'NMI trap', 00H
	ORG $+3
$SG2713	DB	'Breakpoint trap', 00H
$SG2722	DB	'Overflow trap', 00H
	ORG $+2
$SG2731	DB	'Bounds check fault', 00H
	ORG $+1
$SG2740	DB	'Invalid opcode', 00H
	ORG $+1
$SG2749	DB	'Device not found', 00H
	ORG $+3
$SG2759	DB	'Double fault', 00H
	ORG $+3
$SG2769	DB	'Invalid TSS', 00H
$SG2779	DB	'Invalid segment', 00H
$SG2789	DB	'Stack fault', 00H
$SG2799	DB	'General Protection Fault', 00H
	ORG $+3
$SG2809	DB	'Page Fault', 00H
	ORG $+1
$SG2818	DB	'FPU Fault', 00H
	ORG $+2
$SG2828	DB	'Alignment Check', 00H
$SG2837	DB	'Machine Check', 00H
	ORG $+2
$SG2846	DB	'FPU SIMD fault', 00H
CONST	ENDS
PUBLIC	?divide_by_zero_fault@@YAXIII@Z			; divide_by_zero_fault
EXTRN	?kernel_panic@@YAXPBDZZ:PROC			; kernel_panic
; Function compile flags: /Ogtpy
; File c:\documents and settings\sudanix\desktop\eqraos\eqraos-doc\examples\ch4\pmm\core\kernel\exception.cpp
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?divide_by_zero_fault@@YAXIII@Z PROC			; divide_by_zero_fault

; 36   : 	kernel_panic("Divide by 0");

	push	OFFSET $SG2686
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@divide_by_:

; 37   : 	for (;;);

	jmp	SHORT $LL2@divide_by_
?divide_by_zero_fault@@YAXIII@Z ENDP			; divide_by_zero_fault
_TEXT	ENDS
PUBLIC	?single_step_trap@@YAXIII@Z			; single_step_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?single_step_trap@@YAXIII@Z PROC			; single_step_trap

; 42   : 	kernel_panic("Single step");

	push	OFFSET $SG2695
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@single_ste:

; 43   : 	for (;;);

	jmp	SHORT $LL2@single_ste
?single_step_trap@@YAXIII@Z ENDP			; single_step_trap
_TEXT	ENDS
PUBLIC	?nmi_trap@@YAXIII@Z				; nmi_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?nmi_trap@@YAXIII@Z PROC				; nmi_trap

; 48   : 	kernel_panic("NMI trap");

	push	OFFSET $SG2704
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@nmi_trap:

; 49   : 	for (;;);

	jmp	SHORT $LL2@nmi_trap
?nmi_trap@@YAXIII@Z ENDP				; nmi_trap
_TEXT	ENDS
PUBLIC	?breakpoint_trap@@YAXIII@Z			; breakpoint_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?breakpoint_trap@@YAXIII@Z PROC				; breakpoint_trap

; 54   : 	kernel_panic("Breakpoint trap");

	push	OFFSET $SG2713
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@breakpoint:

; 55   : 	for (;;);

	jmp	SHORT $LL2@breakpoint
?breakpoint_trap@@YAXIII@Z ENDP				; breakpoint_trap
_TEXT	ENDS
PUBLIC	?overflow_trap@@YAXIII@Z			; overflow_trap
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?overflow_trap@@YAXIII@Z PROC				; overflow_trap

; 60   : 	kernel_panic("Overflow trap");

	push	OFFSET $SG2722
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@overflow_t:

; 61   : 	for (;;);

	jmp	SHORT $LL2@overflow_t
?overflow_trap@@YAXIII@Z ENDP				; overflow_trap
_TEXT	ENDS
PUBLIC	?bounds_check_fault@@YAXIII@Z			; bounds_check_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?bounds_check_fault@@YAXIII@Z PROC			; bounds_check_fault

; 66   : 	kernel_panic("Bounds check fault");

	push	OFFSET $SG2731
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@bounds_che:

; 67   : 	for (;;);

	jmp	SHORT $LL2@bounds_che
?bounds_check_fault@@YAXIII@Z ENDP			; bounds_check_fault
_TEXT	ENDS
PUBLIC	?invalid_opcode_fault@@YAXIII@Z			; invalid_opcode_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?invalid_opcode_fault@@YAXIII@Z PROC			; invalid_opcode_fault

; 72   : 	kernel_panic("Invalid opcode");

	push	OFFSET $SG2740
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@invalid_op:

; 73   : 	for (;;);

	jmp	SHORT $LL2@invalid_op
?invalid_opcode_fault@@YAXIII@Z ENDP			; invalid_opcode_fault
_TEXT	ENDS
PUBLIC	?no_device_fault@@YAXIII@Z			; no_device_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?no_device_fault@@YAXIII@Z PROC				; no_device_fault

; 78   : 	kernel_panic("Device not found");

	push	OFFSET $SG2749
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@no_device_:

; 79   : 	for (;;);

	jmp	SHORT $LL2@no_device_
?no_device_fault@@YAXIII@Z ENDP				; no_device_fault
_TEXT	ENDS
PUBLIC	?double_fault_abort@@YAXIIII@Z			; double_fault_abort
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?double_fault_abort@@YAXIIII@Z PROC			; double_fault_abort

; 84   : 	kernel_panic("Double fault");

	push	OFFSET $SG2759
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@double_fau:

; 85   : 	for (;;);

	jmp	SHORT $LL2@double_fau
?double_fault_abort@@YAXIIII@Z ENDP			; double_fault_abort
_TEXT	ENDS
PUBLIC	?invalid_tss_fault@@YAXIIII@Z			; invalid_tss_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?invalid_tss_fault@@YAXIIII@Z PROC			; invalid_tss_fault

; 90   : 	kernel_panic("Invalid TSS");

	push	OFFSET $SG2769
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@invalid_ts:

; 91   : 	for (;;);

	jmp	SHORT $LL2@invalid_ts
?invalid_tss_fault@@YAXIIII@Z ENDP			; invalid_tss_fault
_TEXT	ENDS
PUBLIC	?no_segment_fault@@YAXIIII@Z			; no_segment_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?no_segment_fault@@YAXIIII@Z PROC			; no_segment_fault

; 96   : 	kernel_panic("Invalid segment");

	push	OFFSET $SG2779
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@no_segment:

; 97   : 	for (;;);

	jmp	SHORT $LL2@no_segment
?no_segment_fault@@YAXIIII@Z ENDP			; no_segment_fault
_TEXT	ENDS
PUBLIC	?stack_fault@@YAXIIII@Z				; stack_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?stack_fault@@YAXIIII@Z PROC				; stack_fault

; 102  : 	kernel_panic("Stack fault");

	push	OFFSET $SG2789
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@stack_faul:

; 103  : 	for (;;);

	jmp	SHORT $LL2@stack_faul
?stack_fault@@YAXIIII@Z ENDP				; stack_fault
_TEXT	ENDS
PUBLIC	?general_protection_fault@@YAXIIII@Z		; general_protection_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?general_protection_fault@@YAXIIII@Z PROC		; general_protection_fault

; 108  : 	kernel_panic("General Protection Fault");

	push	OFFSET $SG2799
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@general_pr:

; 109  : 	for (;;);

	jmp	SHORT $LL2@general_pr
?general_protection_fault@@YAXIIII@Z ENDP		; general_protection_fault
_TEXT	ENDS
PUBLIC	?page_fault@@YAXIIII@Z				; page_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?page_fault@@YAXIIII@Z PROC				; page_fault

; 115  : 	kernel_panic("Page Fault");

	push	OFFSET $SG2809
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@page_fault:

; 116  : 	for (;;);

	jmp	SHORT $LL2@page_fault
?page_fault@@YAXIIII@Z ENDP				; page_fault
_TEXT	ENDS
PUBLIC	?fpu_fault@@YAXIII@Z				; fpu_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?fpu_fault@@YAXIII@Z PROC				; fpu_fault

; 121  : 	kernel_panic("FPU Fault");

	push	OFFSET $SG2818
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@fpu_fault:

; 122  : 	for (;;);

	jmp	SHORT $LL2@fpu_fault
?fpu_fault@@YAXIII@Z ENDP				; fpu_fault
_TEXT	ENDS
PUBLIC	?alignment_check_fault@@YAXIIII@Z		; alignment_check_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_err$ = 12						; size = 4
_eip$ = 16						; size = 4
_eflags$ = 20						; size = 4
?alignment_check_fault@@YAXIIII@Z PROC			; alignment_check_fault

; 127  : 	kernel_panic("Alignment Check");

	push	OFFSET $SG2828
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@alignment_:

; 128  : 	for (;;);

	jmp	SHORT $LL2@alignment_
?alignment_check_fault@@YAXIIII@Z ENDP			; alignment_check_fault
_TEXT	ENDS
PUBLIC	?machine_check_abort@@YAXIII@Z			; machine_check_abort
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?machine_check_abort@@YAXIII@Z PROC			; machine_check_abort

; 133  : 	kernel_panic("Machine Check");

	push	OFFSET $SG2837
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@machine_ch:

; 134  : 	for (;;);

	jmp	SHORT $LL2@machine_ch
?machine_check_abort@@YAXIII@Z ENDP			; machine_check_abort
_TEXT	ENDS
PUBLIC	?simd_fpu_fault@@YAXIII@Z			; simd_fpu_fault
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
_cs$ = 8						; size = 4
_eip$ = 12						; size = 4
_eflags$ = 16						; size = 4
?simd_fpu_fault@@YAXIII@Z PROC				; simd_fpu_fault

; 139  : 	kernel_panic("FPU SIMD fault");

	push	OFFSET $SG2846
	call	?kernel_panic@@YAXPBDZZ			; kernel_panic
	add	esp, 4
	npad	3
$LL2@simd_fpu_f:

; 140  : 	for (;;);

	jmp	SHORT $LL2@simd_fpu_f
?simd_fpu_fault@@YAXIII@Z ENDP				; simd_fpu_fault
_TEXT	ENDS
PUBLIC	?execption_init@@YAXXZ				; execption_init
EXTRN	?set_vector@@YAXIA6AXXZ@Z:PROC			; set_vector
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
?execption_init@@YAXXZ PROC				; execption_init

; 13   : 	set_vector(0,(void (_cdecl &)(void))divide_by_zero_fault);

	push	OFFSET ?divide_by_zero_fault@@YAXIII@Z	; divide_by_zero_fault
	push	0
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 14   : 	set_vector(1,(void (_cdecl &)(void))single_step_trap);

	push	OFFSET ?single_step_trap@@YAXIII@Z	; single_step_trap
	push	1
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 15   : 	set_vector(2,(void (_cdecl &)(void))nmi_trap);

	push	OFFSET ?nmi_trap@@YAXIII@Z		; nmi_trap
	push	2
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 16   : 	set_vector(3,(void (_cdecl &)(void))breakpoint_trap);

	push	OFFSET ?breakpoint_trap@@YAXIII@Z	; breakpoint_trap
	push	3
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 17   : 	set_vector(4,(void (_cdecl &)(void))overflow_trap);

	push	OFFSET ?overflow_trap@@YAXIII@Z		; overflow_trap
	push	4
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 18   : 	set_vector(5,(void (_cdecl &)(void))bounds_check_fault);

	push	OFFSET ?bounds_check_fault@@YAXIII@Z	; bounds_check_fault
	push	5
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 19   : 	set_vector(6,(void (_cdecl &)(void))invalid_opcode_fault);

	push	OFFSET ?invalid_opcode_fault@@YAXIII@Z	; invalid_opcode_fault
	push	6
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 20   : 	set_vector(7,(void (_cdecl &)(void))no_device_fault);

	push	OFFSET ?no_device_fault@@YAXIII@Z	; no_device_fault
	push	7
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector
	add	esp, 64					; 00000040H

; 21   : 	set_vector(8,(void (_cdecl &)(void))double_fault_abort);

	push	OFFSET ?double_fault_abort@@YAXIIII@Z	; double_fault_abort
	push	8
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 22   : 	set_vector(10,(void (_cdecl &)(void))invalid_tss_fault);

	push	OFFSET ?invalid_tss_fault@@YAXIIII@Z	; invalid_tss_fault
	push	10					; 0000000aH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 23   : 	set_vector(11,(void (_cdecl &)(void))no_segment_fault);

	push	OFFSET ?no_segment_fault@@YAXIIII@Z	; no_segment_fault
	push	11					; 0000000bH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 24   : 	set_vector(12,(void (_cdecl &)(void))stack_fault);

	push	OFFSET ?stack_fault@@YAXIIII@Z		; stack_fault
	push	12					; 0000000cH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 25   : 	set_vector(13,(void (_cdecl &)(void))general_protection_fault);

	push	OFFSET ?general_protection_fault@@YAXIIII@Z ; general_protection_fault
	push	13					; 0000000dH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 26   : 	set_vector(14,(void (_cdecl &)(void))page_fault);

	push	OFFSET ?page_fault@@YAXIIII@Z		; page_fault
	push	14					; 0000000eH
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 27   : 	set_vector(16,(void (_cdecl &)(void))fpu_fault);

	push	OFFSET ?fpu_fault@@YAXIII@Z		; fpu_fault
	push	16					; 00000010H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 28   : 	set_vector(17,(void (_cdecl &)(void))alignment_check_fault);

	push	OFFSET ?alignment_check_fault@@YAXIIII@Z ; alignment_check_fault
	push	17					; 00000011H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector
	add	esp, 64					; 00000040H

; 29   : 	set_vector(18,(void (_cdecl &)(void))machine_check_abort);

	push	OFFSET ?machine_check_abort@@YAXIII@Z	; machine_check_abort
	push	18					; 00000012H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector

; 30   : 	set_vector(19,(void (_cdecl &)(void))simd_fpu_fault);

	push	OFFSET ?simd_fpu_fault@@YAXIII@Z	; simd_fpu_fault
	push	19					; 00000013H
	call	?set_vector@@YAXIA6AXXZ@Z		; set_vector
	add	esp, 16					; 00000010H

; 31   : }

	ret	0
?execption_init@@YAXXZ ENDP				; execption_init
_TEXT	ENDS
END
